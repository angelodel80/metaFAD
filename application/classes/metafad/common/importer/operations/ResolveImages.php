<?php

/**
 * Created by PhpStorm.
 * User: marco
 * Date: 28/11/16
 * Time: 12.17
 */
class metafad_common_importer_operations_ResolveImages extends metafad_common_importer_operations_LinkedToRunner
{
    protected
        $dir,
        $dam;

    /**
     * Si aspetta:
     * imagesDir
     * @param stdClass $params
     * @param metafad_common_importer_MainRunner $runnerRef
     */
    public function __construct(stdClass $params, metafad_common_importer_MainRunner $runnerRef)
    {
        parent::__construct($params, $runnerRef);

        $this->dam = $this->getOrSetDefault("DAM", __ObjectFactory::createObject('metafad.teca.DAM.services.ImportMedia'));
        $this->dir = $params->imagesDir ?: "";
    }

    /**
     * Riceve:
     * data = dati in formato finale (precedente al salvataggio)
     *
     * @param stdClass $input
     * @return stdClass come l'input, ma con data modificato
     * @throws Exception se il file non esiste
     */
    public function execute($input)
    {
        $data = $input->data;

        $input->data = $this->fillPlaceholder($data);

        return $input;
    }

    public function validateInput($input)
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * @param $in
     * @return mixed
     */
    private function fillPlaceholder($in){
        if (is_a($in, "metafad_common_importer_utilities_ImagePlaceholder")){
            return $this->saveImageInDAM($in);
        } else if (is_a($in, "stdClass")) {
            foreach($in as $k => $v){
                $in->{$k} = $this->fillPlaceholder($v);
            }
        } else if (is_array($in)){
            foreach($in as $k => $v){
                $in[$k] = $this->fillPlaceholder($v);
            }
        }
        return $in;
    }


    /**
     * Salvataggio immagini nel DAM
     *
     * @param metafad_common_importer_utilities_ImagePlaceholder $img Percorso e nome dell'immagine
     *
     * @return string
     */
    private function saveImageInDAM($img)
    {
        $image = $img->filename;
        $filePath = $this->dir . $image;
        if ($image != '') {
            $media = new stdClass();
            $media->title = pathinfo($filePath, PATHINFO_BASENAME);
            $media->filename = $filePath;

            $mediaData = array();
            $mediaData['addMedias'][] = array(
                'MainData' => $media,
                'bytestream' => realpath($filePath)
            );
            $mediaData = json_encode($mediaData);
            $mediaExists = $this->dam->mediaExists($filePath);

            if (!$mediaExists['response']) {
                $res = $this->dam->insertMedia($mediaData);
            }

            if (!empty($res)) {
                $id = $res->ids[0];
            } else if ($mediaExists['ids']) {
                $id = $mediaExists['ids'][0];
            }

            $result = isset($id) ? $this->dam->getJSON($id, $media->title) : null;
        }

        return !empty($result) ? $result : NULL;
    }

}