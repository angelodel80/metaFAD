<?php

class metafad_common_importer_operations_ICCD_TRCSplitRecords extends metafad_common_importer_operations_LinkedToRunner
{
    protected $splitKey = "";

    /**
     * Si aspetta:
     * splitKey = stringa in cui il muro di stringhe viene spezzato
     * metafad_common_importer_operations_TRCToStdClass constructor.
     * @param stdClass $params
     * @param metafad_common_importer_MainRunner $runnerRef
     */
    public function __construct(stdClass $params, metafad_common_importer_MainRunner $runnerRef)
    {
        $this->splitKey = $params->splitKey ?: "";

        parent::__construct($params, $runnerRef);
    }

    /**
     * Si aspetta in input:
     * trcrecords = array di stringhe in formato "<K>:<V>"
     * Restituisce:
     * argset = array di stdClass il cui field "data" sar√† un array di stringhe in formato "<K>:<V>"
     * @param stdClass $input
     * @return stdClass (argset contiene i blocchi di stringhe in formato "<K>:<V>", che rappresentano una singola scheda)
     */
    public function execute($input)
    {
        $result = $input->trcrecords;

        $ret = $this->splitToFiles($result);

        return (object)array("argset" => array_map(function($a){return (object)array("data" => $a);}, $ret));
    }

    /**
     * Creazione struttura TRC
     *
     * @param array $result Struttura temporanea creata
     *
     * @return array $records Array di oggetti contenente la struttra TRC
     */
    protected function splitToFiles($result)
    {
        $records = array();

        $counter = 0;
        $len = count($result);

        for(; $counter < $len; $counter++) {
            $line = trim($result[$counter]);
            if (!empty($line) && preg_match('/^(\w{2,5}):(.*)$/', $line, $matches)) {
                list($key, $value) = $this->getKeyValue($line);

                if ($key == $this->splitKey) {
                    if (!empty($record)){
                        $records[] = $record;
                    }

                    $record = array();
                } else {
                    $record[] = $line;
                }
            }
        }

        $recordarr = (array)$record;
        if (!empty($recordarr))
            $records[] = $record;

        return $records;
    }

    protected function getKeyValue($line)
    {
        if (preg_match('/^(\w{2,5}):(.*)$/', trim($line), $matches)) {
            return array(trim($matches[1]), trim($matches[2]));
        }

        return array();
    }

    public function validateInput($input)
    {
        // TODO: Change the autogenerated stub
    }
}