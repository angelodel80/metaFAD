<?php

class metafad_common_importer_operations_ICCD_SetRelations extends metafad_common_importer_operations_LinkedToRunner
{
    protected
        $duplicates,
        $iccdFormProxy,
        $uniqueIccdIdProxy,
        $modelName,
        $iccdProxy;

    /**
     * Si aspetta:
     * modelName: nome del modello con cui salvare il record
     * metafad_common_importer_operations_TRCToStdClass constructor.
     * @param stdClass $params
     * @param metafad_common_importer_MainRunner $runnerRef
     */
    public function __construct(stdClass $params, metafad_common_importer_MainRunner $runnerRef)
    {
        parent::__construct($params, $runnerRef);

        $this->duplicates = $this->getOrSetDefault("duplicates", array());
        $this->modelName = $params->modelName ?: "";
        $this->iccdProxy = $this->getOrSetDefault("iccdProxy", __ObjectFactory::createObject('metafad.gestioneDati.boards.models.proxy.ICCDProxy'));
        $this->iccdFormProxy = $this->getOrSetDefault("iccdFormProxy", __ObjectFactory::createObject('metafad.modules.iccd.models.proxy.IccdFormProxy'));
        $this->uniqueIccdIdProxy = $this->getOrSetDefault("uniqueIccdIdProxy", __ObjectFactory::createObject('metafad.gestioneDati.boards.models.proxy.UniqueIccdIdProxy'));
    }

    /**
     * Riceve:
     * data = dati in formato finale (precedente al salvataggio)
     *
     * Output:
     * data = dati in formato finale (precedente al salvataggio)
     *
     * @param stdClass $input
     * @return stdClass solito input ma con "data" modificato
     * @throws Exception se il file non esiste
     */
    public function execute($input)
    {
        $data = $input->data;

        $input->data = $this->setRelations($data);

        $this->runner->set("duplicates", $this->duplicates);

        return $input;
    }

    protected function setRelations(&$obj)
    {
        $obj->__id = 0;
        $obj->__model = $this->modelName;

        $this->utf8_encode_deep($obj);

        $uniqueIccdId = $this->uniqueIccdIdProxy->createUniqueIccdId($obj);
        $obj = $this->uniqueIccdIdProxy->checkUnique($obj, $uniqueIccdId);

        if (is_array($this->duplicates) && ($obj->__id != 0 or array_key_exists($uniqueIccdId, $this->duplicates)))
            $this->duplicates[$uniqueIccdId]++;
        else
            $this->duplicates[$uniqueIccdId] = 1;

        $rv = $obj->RV[0];

        if ($rv->RSE) {
            foreach ($rv->RSE as $i => $rse) {
                $objtemp = new stdClass();
                $objtemp->id = $this->ICCDfind('RSEC', $rse->RSEC);
                $objtemp->text = $rse->RSEC;
                $rse->RSEC = $objtemp;
            }
        }

        if ($rv->ROZ) {
            foreach ($rv->ROZ as $i => $roz) {
                $objtemp = new stdClass();
                $objtemp->id = $this->ICCDfind('ROZ-element', $roz->{'ROZ-element'});
                $objtemp->text = $roz->{'ROZ-element'};
                $roz->{'ROZ-element'} = $objtemp;
            }
        }

        return $obj;
    }

    /**
     * Codifica UTF-8 di tutti i dati della scheda
     *
     * @param object $input Oggetto contenente i dati della scheda da codificare
     */
    function utf8_encode_deep(&$input)
    {
        if (is_string($input)) {
            $input = utf8_encode($input);
        } else if (is_array($input)) {
            foreach ($input as &$value) {
                $this->utf8_encode_deep($value);
            }

            unset($value);
        } else if (is_object($input)) {
            $vars = array_keys(get_object_vars($input));

            foreach ($vars as $var) {
                $this->utf8_encode_deep($input->$var);
            }
        }
    }

    private function ICCDfind($fieldName, $term)
    {
        if ($term != '') {
            $result = $this->iccdFormProxy->findTerm($fieldName, null, null, $term, null);
            return count($result) > 0 ? $result[0]['id'] : null;
        } else {
            return null;
        }
    }

    public function validateInput($input)
    {
        // TODO: Change the autogenerated stub
    }

}