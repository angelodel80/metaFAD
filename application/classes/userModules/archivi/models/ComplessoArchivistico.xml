<?xml version="1.0" encoding="utf-8"?>
<model:Model
    xmlns:glz="http://www.glizy.org/dtd/1.0/"
    xmlns:model="http://www.glizy.org/dtd/1.0/model/"
    model:tableName="archivi.models.ComplessoArchivistico"
    model:usePrefix="true"
    model:type="document"
    model:baseClass="metafad.common.models.ActiveRecordDocument">

    <model:Define>
        <model:Field name="fulltext" type="string" index="fulltext" onlyIndex="true" />
        <model:Field name="_denominazione" type="string" index="true" />
        <model:Field name="pageId" type="string" />
        <model:Field name="root" type="string" index="true"/>
        <model:Field name="isValid" type="int"/>
<model:Field validator="notempty" name="acronimoSistema" description="Acronimo di sistema" type="string" index="true"/>
<model:Field name="identificativo" description="Identificativo per il Complesso" type="string"/>
<model:Field name="codiceIdentificativoSistema" description="Codice identificativo di sistema" type="string"/>
<model:Field name="altriCodiciIdentificativi" description="Altri codici identificativi" type="object" readFormat="false"/>
<model:Field name="codiceIdentificativoPrecedente" description="Codice identificativo precedente" type="object" readFormat="false"/>
<model:Field validator="notempty" name="livelloDiDescrizione" description="Livello di descrizione" type="string"/>
<model:Field name="externalID" description="ID importazione" type="string" index="true"/>
<model:Field name="parent" description="Livello superiore" type="array_id" index="true"/>
<model:Field validator="notempty" name="denominazione" description="Denominazione" type="string"/>
<model:Field name="altraDenominazione" description="Altra Denominazione" type="object" readFormat="false"/>
<model:Field name="cronologia" description="Estremi cronologici" type="object" readFormat="false"/>
<model:Field name="consistenza" description="Consistenza" type="object" readFormat="false"/>
<model:Field name="metriLineari" description="Metri lineari" type="string"/>
<model:Field name="consistenzaTotale" description="Consistenza totale" type="string"/>
<model:Field name="produttori" description="Soggetti Produttori" type="object" readFormat="false"/>
<model:Field name="soggettoConservatore" description="Soggetto conservatore" type="object" readFormat="false"/>
<model:Field name="cronologiaConservatore" description="Estremi cronologici di conservazione" type="object" readFormat="false"/>
<model:Field name="strumentiRicerca" description="Strumenti di ricerca" type="object" readFormat="false"/>
<model:Field name="descrizioneContenuto" description="Descrizione del contentuto" type="text"/>
<model:Field name="storiaArchivistica" description="Storia archivistica" type="text"/>
<model:Field name="criteriOrdinamento" description="Criteri di ordinamento, di numerazione e altre informazioni utili" type="text"/>
<model:Field name="condizioniAccesso" description="Condizioni di accesso" type="text"/>
<model:Field name="documentazioneArchivioCollegata" description="Documentazione d\'archivio collegata" type="object" readFormat="false"/>
<model:Field name="riferimentiBibliografici" description="Riferimenti bibliografici" type="object" readFormat="false"/>
<model:Field name="fontiArchivistiche" description="Fonti archivistiche" type="object" readFormat="false"/>
<model:Field name="riferimentiWeb" description="Riferimenti web" type="object" readFormat="false"/>
<model:Field name="linguaDescrizioneRecord" description="Lingua di descrizione del record" type="string"/>
<model:Field name="compilazione" description="Compilazione" type="object" readFormat="false"/>
<model:Field name="osservazioni" description="Osservazioni" type="text"/>
<model:Field name="visibility" description="Visibilit&#xE0; FE" type="string"/>

    </model:Define>

    <model:Script parent="model"><![CDATA[
    public function publish($values = null, $comment='', $forceNew=false)
    {
        $r = parent::publish($values, $comment, $forceNew);
        return $r;
    }

    public function save($values=null, $forceNew=false, $status='DRAFT', $comment='')
    {
        $isNew = $this->isNew();
        $r = parent::save($values, $forceNew, $status, $comment);

        return $r;
    }

    public function getSolrDocument()
    {
        $solrModel = array (
            '__id' => 'id',
            'document' => 'doc_store',
            '__model' => 'document_type_t',
            'updateDateTime' => 'update_at_s',
            '_hasDigital' => 'digitale_i',
            'isValid' => 'isValid_i',
            'acronimoSistema' => 'acronimoSistema_s',
            'identificativo' => 'identificativo_s',
            'livelloDiDescrizione' => 'livelloDiDescrizione_s',
            'externalID' => 'externalID_s',
            '@parent[!]->id' => 'parent_i',
            'denominazione' => 'denominazione_s',
            '@cronologia->estremoCronologicoTestuale' => 'cronologia_s',
            'visibility' => 'visibility_s',
            '_parents' => 'parents_ss',
            '_parentsIds' => 'parents_is',
            '_complessoAppartenenza' => 'complessoAppartenenza_s',
            '@cronologia[!]->estremoRemoto_codificaData:onlyYear' => 'estremoRemoto_i',
            '@cronologia[!]->estremoRecente_codificaData:onlyYear' => 'estremoRecente_i',
            '@cronologia[!]->estremoRemoto_secolo:romanToInteger' => 'estremoRemotoSecolo_i',
            '@cronologia[!]->estremoRecente_secolo:romanToInteger' => 'estremoRecenteSecolo_i',
            '@produttori->soggettoProduttore->text[]' => 'produttori_ss',
            '@descrizioneContenuto,storiaArchivistica,criteriOrdinamento[]' => 'descrizione_ss',
            '@compilazione->redattore[]' => 'redattore_ss',
            '@compilazione->azione[]' => 'azione_ss',
);
        
        $solrModel = array_merge(parent::getSolrDocument(), $solrModel);

        return $solrModel;
    }

    public function getBeAdvancedSearchFields()
    {
        $searchFields = array (
  array (
    'type' => 'select',
    'label' => 'Livello di descrizione',
    'field' => 'livelloDiDescrizione_s',
    'options' => 
    array (
      '' => 'Record radice',
      '*' => 'Tutti',
      'coplesso-di-fondi' => 'Complesso di fondi',
      'superfondo' => 'Superfondo',
      'fondo' => 'Fondo',
      'sub-fondo' => 'Sub-fondo',
      'sezione' => 'Sezione',
      'serie' => 'Serie',
      'sottoserie' => 'Sottoserie',
      'sottosottoserie' => 'Sottosottoserie',
      'collezione-raccolta' => 'Collezione / raccolta',
      'unita' => 'Unità',
      'sottounita' => 'Sottounità',
      'sottosottounita' => 'Sottosottounità',
      'documento-principale' => 'Documento principale',
      'unita-documentaria' => 'Unità documentaria',
    ),
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'ID',
    'field' => 'identificativo_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Tipologia',
    'field' => 'tipo_s',
  ),
  array (
    'type' => 'checkbox',
    'label' => 'Digitale',
    'field' => 'digitale_i',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Denominazione',
    'field' => 'denominazione_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Produttore',
    'field' => 'produttori_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Complesso d"appartenenza',
    'field' => 'complessoAppartenenza_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Autore/responsabile',
    'field' => 'autoreResponsabile_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Ruolo',
    'field' => 'ruolo_ss',
  ),
  array (
    'type' => 'date',
    'label' => 'Cronologia/Date',
    'field' => 'estremoRemoto_i,estremoRecente_i',
  ),
  array (
    'type' => 'dateCentury',
    'label' => 'Cronologia/Secoli',
    'field' => 'estremoRemotoSecolo_i,estremoRecenteSecolo_i',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Descrizione',
    'field' => 'descrizione_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Luogo',
    'field' => 'luogo_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Lingua',
    'field' => 'lingua_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Antroponimi',
    'field' => 'antroponimi_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Enti',
    'field' => 'enti_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Toponimi',
    'field' => 'toponimi_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Redattore',
    'field' => 'redattore_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Azione',
    'field' => 'azione_ss',
  ),
);
        return $searchFields;
    }

    public function getRecordId()
    {
      return $this->_denominazione;
    }
    ]]></model:Script>

    <model:Query name="mysql_getByIndexedInt">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
          LEFT JOIN `documents_index_int_tbl` `index0` ON (
            `doc_detail`.`document_detail_id` = `index0`.`document_index_int_FK_document_detail_id`
          )
          AND (
            `index0`.`document_index_int_name` = :intName
          )
        WHERE
          (
            `index0`.`document_index_int_value` = :intVal
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>

    <model:Query name="mysql_getByIndexedText">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
          LEFT JOIN `documents_index_text_tbl` `index0` ON (
            `doc_detail`.`document_detail_id` = `index0`.`document_index_text_FK_document_detail_id`
          )
          AND (
            `index0`.`document_index_text_name` = :textName
          )
        WHERE
          (
            `index0`.`document_index_text_value` = :textVal
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>

    <model:Query name="mysql_getByDocumentId">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc_detail`.`document_detail_FK_document_id` = :docId
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>
</model:Model>
