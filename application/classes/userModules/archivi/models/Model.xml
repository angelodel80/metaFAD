<?xml version="1.0" encoding="utf-8"?>
<model:Model
    xmlns:glz="http://www.glizy.org/dtd/1.0/"
    xmlns:model="http://www.glizy.org/dtd/1.0/model/"
    model:tableName="archivi.models.Model"
    model:usePrefix="true"
    model:type="document"
    model:baseClass="metafad.common.models.ActiveRecordDocument">

    <model:Define>
        <model:Field name="fulltext" type="string" index="fulltext" onlyIndex="true" />
        <model:Field name="acronimoSistema" type="string" index="true"/>
        <model:Field name="identificativo" type="string" index="true"/>
        <model:Field name="denominazione" type="string" index="true"/>
        <model:Field name="cronologia" type="object" readFormat="false"/>
        <model:Field name="produttori" type="object" readFormat="false"/>
        <model:Field name="codiceIdentificativoSistema" type="string" index="true"/>
        <model:Field name="livelloDiDescrizione" type="string" index="true"/>
        <model:Field name="parent" type="array_id" index="true"/>
        <model:Field name="externalID" type="string" index="true"/>
        <model:Field name="instituteKey" type="string" index="true"/>
        <model:Field name="_denominazione" type="string" index="true"/>
        <model:Field name="pageId" type="string" />
        <model:Field name="root" type="string" index="true"/>
        <model:Field name="visibility" type="string"/>
        <model:Field name="isValid" type="int" />
        <model:Field name="ordinamentoProvvisorio" type="int"/>
        <model:Field name="ordinamentoGlobale" type="int"/>
    </model:Define>

    <model:Script parent="model"><![CDATA[
public function loadFromArray($values, $useSet=false)
{
    if (!empty($values)) {
        $this->emptyRecord();

        $documentObjVo = __ObjectFactory::createObject('archivi.models.vo.DocumentObjectVO', $values);
        $this->hasPublishedVersion = $documentObjVo->hasPublishedVersion();
        $this->hasDraftVersion = $documentObjVo->hasDraftVersion();

        $detailObj = $documentObjVo->{self::DOCUMENT_DETAIL_OBJECT};

        if ($detailObj) {
            if (__Config::get('glizy.dataAccess.serializationMode') == 'json') {
                $this->data = json_decode($detailObj);
            } else {
                $data = unserialize($detailObj);

                // TODO rimuovere quando la migrazione dei dati da serializzazione php a json è completata
                if (is_array($data)) {
                    foreach ($data as $k => $v) {
                        $this->data->$k = $v;
                    }
                } else  {
                    $this->data = $data;
                }
            }
        }

        if (!is_object($this->data)) {
            $this->data = new StdClass;
        }

        foreach ($values as $k => $v) {
            if (strpos($k, self::DOCUMENT_BASE_PREFIX)===false) {
                $this->virtualData->$k = $documentObjVo->$k;
            } else {
                $this->data->$k = $documentObjVo->$k;
            }
        }

        if ($values[self::DOCUMENT_ID]) $this->setId($values[self::DOCUMENT_ID]);

        // NOTA: forse non è opportuno non permettere l'override del tipo
        if ($values[self::DOCUMENT_TYPE]) $this->setType($values[self::DOCUMENT_TYPE]);
        if ($documentObjVo->{self::DOCUMENT_DETAIL_ID}) $this->setDetailId($documentObjVo->{self::DOCUMENT_DETAIL_ID});
        if ( $documentObjVo->{self::DOCUMENT_DETAIL_STATUS}) $this->setStatus( $documentObjVo->{self::DOCUMENT_DETAIL_STATUS});
    }
}


public function publish($values = null, $comment='', $forceNew=false)
{
    $this->setDefaultFieldsValues();
    if (!$this->isNew()) {
        $application = org_glizy_ObjectValues::get('org.glizy', 'application');
        $application->dispatchEventByArray( GLZ_LOG_EVENT, array('level' => GLZ_LOG_INFO,
                'group' => 'audiction',
                'message' => 'Modifica scheda "'.__Link::makeLink('archiviMVC', array('action'=>'edit', 'id'=>$this->getId(), 'label' => $this->_denominazione)).'"' ));
    }

    $r = parent::publish($values, $comment, $forceNew);
    return $r;
}

public function save($values=null, $forceNew=false, $status='DRAFT', $comment='')
{
    $isNew = $this->isNew();
    $this->setDefaultFieldsValues();
    $r = parent::save($values, $forceNew, $status, $comment);

    if ($isNew) {
        $application = org_glizy_ObjectValues::get('org.glizy', 'application');
        $application->dispatchEventByArray( GLZ_LOG_EVENT, array('level' => GLZ_LOG_INFO,
                'group' => 'audiction',
                'message' => 'Creazione scheda "'.str_replace('/bin/', '/', __Link::makeLink('archiviMVC', array('action'=>'edit', 'id'=>$this->getId(), 'label' => $this->_denominazione, 'pageId' => 'archivio-deputazione'))).'"' ));
    }

    return $r;
}

protected function setDefaultFieldsValues()
{
    if ($this->parent) {
        $this->parentId = $this->parent->id;
    } else {
        $this->parentId = 0;
    }
}

    public function getBeAdvancedSearchFields()
    {
        $searchFields = array(
            'Titolo' => 'title_t',
            'Tipo scheda' => 'type_t',
            'Numerazione livello' => 'numerazioneLivello_s',
            'Data inizio' => 'dataInizio_s',
            'Data fine' => 'dataFine_s',
            'Data topica' => 'dataTopica_s',
            'Numero fogli' => 'numeroFogli_i',
            'Identificativo entità padre' => $encodedParent
        );

        return $searchFields;
    }
    ]]></model:Script>

    <model:Query name="mysql_getParent">
    <![CDATA[
        SELECT * 
        FROM
        (
          SELECT 
            `doc_detail`.document_detail_FK_document_id,
            max(`doc_detail`.document_detail_modificationDate) maxModificationDate
          FROM 
            `documents_tbl` `doc` 
            JOIN `documents_detail_tbl` `doc_detail` ON (
              `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
            ) 
            AND (
              `doc_detail`.`document_detail_status` = 'PUBLISHED' 
              OR `doc_detail`.`document_detail_status` = 'DRAFT'
            ) 
            AND (
              `doc_detail`.`document_detail_FK_language_id` = :languageId
            ) 
            LEFT JOIN `documents_index_int_tbl` `index0` ON (
              `doc_detail`.`document_detail_id` = `index0`.`document_index_int_FK_document_detail_id`
            ) 
            AND (
              `index0`.`document_index_int_name` = 'parent'
            ) 
          WHERE 
            (
              `index0`.`document_index_int_value` = :parent
            )
          GROUP BY document_detail_FK_document_id
        ) AS X
        JOIN documents_detail_tbl doc_detail ON (
            X.document_detail_FK_document_id = doc_detail.document_detail_FK_document_id 
        ) AND (
            X.maxModificationDate = doc_detail.document_detail_modificationDate 
        )
        JOIN documents_tbl doc ON (
          doc.document_id = doc_detail.document_detail_FK_document_id
        )
        WHERE doc_detail.document_detail_status != 'OLD'
        ORDER BY document_id
    ]]>
    </model:Query>

    <model:Query name="mysql_getByIndexedInt">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
          LEFT JOIN `documents_index_int_tbl` `index0` ON (
            `doc_detail`.`document_detail_id` = `index0`.`document_index_int_FK_document_detail_id`
          )
          AND (
            `index0`.`document_index_int_name` = :intName
          )
        WHERE
          (
            `index0`.`document_index_int_value` = :intVal
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>

    <model:Query name="mysql_getByIndexedTextLike">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
          LEFT JOIN `documents_index_text_tbl` `index0` ON (
            `doc_detail`.`document_detail_id` = `index0`.`document_index_text_FK_document_detail_id`
          )
          AND (
            `index0`.`document_index_text_name` = :textName
          )
        WHERE
          (
            `index0`.`document_index_text_value` LIKE :textVal
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>

    <model:Query name="mysql_getByIndexedText">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
          LEFT JOIN `documents_index_text_tbl` `index0` ON (
            `doc_detail`.`document_detail_id` = `index0`.`document_index_text_FK_document_detail_id`
          )
          AND (
            `index0`.`document_index_text_name` = :textName
          )
        WHERE
          (
            `index0`.`document_index_text_value` = :textVal
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>

    <model:Query name="mysql_getByDocumentId">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc_detail`.`document_detail_FK_document_id` = :docId
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>
</model:Model>
