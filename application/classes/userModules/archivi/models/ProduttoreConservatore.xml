<?xml version="1.0" encoding="utf-8"?>
<model:Model
    xmlns:glz="http://www.glizy.org/dtd/1.0/"
    xmlns:model="http://www.glizy.org/dtd/1.0/model/"
    model:tableName="archivi.models.ProduttoreConservatore"
    model:usePrefix="true"
    model:type="document"
    model:baseClass="metafad.common.models.ActiveRecordDocument">

    <model:Define>
        <model:Field name="fulltext" type="string" index="fulltext" onlyIndex="true" />
        <model:Field name="_denominazione" type="string" index="true" />
        <model:Field name="pageId" type="string" />
        <model:Field name="root" type="string" index="true"/>
        <model:Field name="isValid" type="int"/>
<model:Field validator="notempty" name="acronimoSistema" description="Acronimo di sistema" type="string"/>
<model:Field name="identificativo" description="Identificativo per l\'Entit&#xE0;" type="string"/>
<model:Field name="codiceIdentificativoSistema" description="Codice identificativo di sistema" type="string"/>
<model:Field name="altriCodiciIdentificativi" description="Altri codici identificativi" type="object" readFormat="false"/>
<model:Field name="codiceIdentificativoPrecedente" description="Codice identificativo precedente" type="object" readFormat="false"/>
<model:Field name="externalID" description="ID importazione" type="string" index="true"/>
<model:Field name="isProdCons" description="Maschera Finale Produttore/Conservatore" type="array"/>
<model:Field name="isForceProdCons" description="Maschera di forzatura Produttore/Conservatore" type="array"/>
<model:Field validator="notempty" name="tipologiaChoice" description="Tipologia" type="string" index="true"/>
<model:Field name="tipologiaEnte" description="Tipologia Ente" type="string"/>
<model:Field name="genere" description="Genere" type="string"/>
<model:Field validator="notempty" name="condizioneGiuridica" description="Condizione giuridica" type="object" readFormat="false"/>
<model:Field name="ente_famiglia_denominazione" description="Denominazione" option="{&quot;array_id&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;field&quot;:&quot;entitaDenominazione&quot;}}" type="array_id" index="true" readFormat="true"/>
<model:Field name="persona_denominazione" description="Denominazione" option="{&quot;array_id&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;field&quot;:&quot;entitaDenominazione&quot;}}" type="array_id" index="true" readFormat="true"/>
<model:Field name="luogoEnte" description="Luogo Ente" type="object" readFormat="false"/>
<model:Field name="luogoFamiglia" description="Luogo Famiglia" type="object" readFormat="false"/>
<model:Field name="luogoPersona" description="Luogo Persona" type="object" readFormat="false"/>
<model:Field name="cronologiaEnte" description="Estremi cronologici" type="object" readFormat="false"/>
<model:Field name="cronologiaFamiglia" description="Estremi cronologici" type="object" readFormat="false"/>
<model:Field name="cronologiaPersona" description="Estremi cronologici" type="object" readFormat="false"/>
<model:Field name="noteEntita" description="Note" type="text"/>
<model:Field name="contestoStatuale" description="Contesto statuale" type="object" readFormat="false"/>
<model:Field name="titoloEntita" description="Titolo" type="object" readFormat="false"/>
<model:Field name="attivitaProfessioneQualifica" description="Attivit&#xE0;, professione o qualifica" type="object" readFormat="false"/>
<model:Field name="storiaBiografiaStrutturaAmministrativa" description="Storia / Biografia / Struttura amministrativa" type="text"/>
<model:Field name="complessiArchivisticiProduttore" description="Complessi archivistici" type="object" readFormat="false"/>
<model:Field name="soggettiProduttori" description="Soggetti produttori" type="object" readFormat="false"/>
<model:Field name="riferimentiBibliograficiProduttore" description="Riferimenti bibliografici" type="object" readFormat="false"/>
<model:Field name="fontiArchivisticheProduttore" description="Fonti archivistiche" type="object" readFormat="false"/>
<model:Field name="riferimentiWebProduttore" description="Riferimenti web" type="object" readFormat="false"/>
<model:Field name="linguaDescrizioneRecordProduttore" description="Lingua di descrizione del record" type="string"/>
<model:Field validator="notempty" name="compilazioneProduttore" description="Compilazione" type="object" readFormat="false"/>
<model:Field name="osservazioniProduttore" description="Osservazioni" type="text"/>
<model:Field name="cenniStoriciIstituzionali" description="Cenni storici istituzionali" type="text"/>
<model:Field name="sog_cons_patrimonio" description="Patrimonio e politiche di gestione e di acquisizione" type="text"/>
<model:Field name="sog_cons_note" description="Note" type="text"/>
<model:Field name="sog_cons_mail" description="Mail" type="string"/>
<model:Field name="sog_cons_pec" description="PEC" type="string"/>
<model:Field name="sog_cons_url" description="URL" type="string"/>
<model:Field name="sog_cons_telefono" description="Telefono" type="string"/>
<model:Field name="sog_cons_fax" description="Fax" type="string"/>
<model:Field name="sog_cons_sedi" description="Sedi" type="object" readFormat="false"/>
<model:Field name="condizioniAccesso" description="Condizioni di accesso" type="text"/>
<model:Field name="complessiArchivisticiConservatore" description="Complessi archivistici" type="object" readFormat="false"/>
<model:Field name="riferimentiBibliograficiConvervatore" description="Riferimenti bibliografici" type="object" readFormat="false"/>
<model:Field name="fontiArchivisticheConvervatore" description="Fonti archivistiche" type="object" readFormat="false"/>
<model:Field name="riferimentiWebConvervatore" description="Riferimenti web" type="object" readFormat="false"/>
<model:Field name="linguaDescrizioneRecordConvervatore" description="Lingua di descrizione del record" type="string"/>
<model:Field validator="notempty" name="compilazioneConvervatore" description="Compilazione" type="object" readFormat="false"/>
<model:Field name="osservazioniConvervatore" description="Osservazioni" type="text"/>

    </model:Define>

    <model:Script parent="model"><![CDATA[
    public function publish($values = null, $comment='', $forceNew=false)
    {
        $r = parent::publish($values, $comment, $forceNew);
        return $r;
    }

    public function save($values=null, $forceNew=false, $status='DRAFT', $comment='')
    {
        $isNew = $this->isNew();
        $r = parent::save($values, $forceNew, $status, $comment);

        return $r;
    }

    public function getSolrDocument()
    {
        $solrModel = array (
            '__id' => 'id',
            'document' => 'doc_store',
            '__model' => 'document_type_t',
            'updateDateTime' => 'update_at_s',
            '_hasDigital' => 'digitale_i',
            'isValid' => 'isValid_i',
            'acronimoSistema' => 'acronimoSistema_s',
            'identificativo' => 'identificativo_s',
            'externalID' => 'externalID_s',
            'isProdCons' => 'prodCons_ss',
            '@entitaDenominazione' => 'denominazione_s',
            'tipologiaChoice' => 'tipologia_s',
            'tipologiaEnte' => 'tipologiaEnte_s',
            '@ente_famiglia_denominazione->entitaDenominazione|persona_denominazione->entitaDenominazione' => 'denominazione_s',
            '@condizioneGiuridica->listCondizioneGiuridica' => 'condizioneGiuridica_s',
            '@cronologiaEnte->estremoCronologicoTestuale|cronologiaFamiglia->estremoCronologicoTestuale|cronologiaPersona->estremoCronologicoTestuale' => 'cronologia_s',
            '@condizioneGiuridica[!]->estremiCronologici->estremoRemoto_codificaData:onlyYear' => 'estremoRemoto_i',
            '@condizioneGiuridica[!]->estremiCronologici->estremoRecente_codificaData:onlyYear' => 'estremoRecente_i',
            '@condizioneGiuridica[!]->estremiCronologici->estremoRemoto_secolo:romanToInteger' => 'estremoRemotoSecolo_i',
            '@condizioneGiuridica[!]->estremiCronologici->estremoRecente_secolo:romanToInteger' => 'estremoRecenteSecolo_i',
            '@compilazione->redattore[]' => 'redattore_ss',
            '@compilazione->azione[]' => 'azione_ss',
);
        
        $solrModel = array_merge(parent::getSolrDocument(), $solrModel);

        return $solrModel;
    }

    public function getBeAdvancedSearchFields()
    {
        $searchFields = array (
  array (
    'type' => 'autocomplete',
    'label' => 'ID',
    'field' => 'identificativo_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Tipologia',
    'field' => 'tipologia_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Tipologia di Ente',
    'field' => 'tipologiaEnte_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Condizione Giuridica',
    'field' => 'condizioneGiuridica_s',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Denominazione',
    'field' => 'denominazione_s',
  ),
  array (
    'type' => 'date',
    'label' => 'Cronologia/Date',
    'field' => 'estremoRemoto_i,estremoRecente_i',
  ),
  array (
    'type' => 'dateCentury',
    'label' => 'Cronologia/Secoli',
    'field' => 'estremoRemotoSecolo_i,estremoRecenteSecolo_i',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Produttore/Conservatore',
    'field' => 'prodCons_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Redattore',
    'field' => 'redattore_ss',
  ),
  array (
    'type' => 'autocomplete',
    'label' => 'Azione',
    'field' => 'azione_ss',
  ),
);
        return $searchFields;
    }

    public function getRecordId()
    {
      return $this->_denominazione;
    }
    ]]></model:Script>

    <model:Query name="mysql_getByIndexedInt">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
          LEFT JOIN `documents_index_int_tbl` `index0` ON (
            `doc_detail`.`document_detail_id` = `index0`.`document_index_int_FK_document_detail_id`
          )
          AND (
            `index0`.`document_index_int_name` = :intName
          )
        WHERE
          (
            `index0`.`document_index_int_value` = :intVal
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>

    <model:Query name="mysql_getByIndexedText">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc`.`document_id` = `doc_detail`.`document_detail_FK_document_id`
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
          LEFT JOIN `documents_index_text_tbl` `index0` ON (
            `doc_detail`.`document_detail_id` = `index0`.`document_index_text_FK_document_detail_id`
          )
          AND (
            `index0`.`document_index_text_name` = :textName
          )
        WHERE
          (
            `index0`.`document_index_text_value` = :textVal
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>

    <model:Query name="mysql_getByDocumentId">
        <![CDATA[
        SELECT
          `doc`.*,
          `doc_detail`.*
        FROM
          `documents_tbl` `doc`
          JOIN `documents_detail_tbl` `doc_detail` ON (
            `doc_detail`.`document_detail_FK_document_id` = :docId
          )
          AND (
            `doc_detail`.`document_detail_status` = 'PUBLISHED' OR
            `doc_detail`.`document_detail_status` = 'DRAFT'
          )
          AND (
            `doc_detail`.`document_detail_FK_language_id` = :languageId
          )
        GROUP BY `doc`.`document_id`
        ORDER BY `doc_detail`.`document_detail_FK_document_id` DESC
    ]]>
    </model:Query>
</model:Model>
